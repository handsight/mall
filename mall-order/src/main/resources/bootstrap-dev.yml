server:
  port: 7005


spring:
  application:
    name: mall_order
  cloud:
    nacos:
      discovery:
        server-addr: http://localhost:8848
      config:
        server-addr: http://localhost:8848
        file-extension: yaml  # 必须修改成yaml
        group: DEFAULT_GROUP  # 缺省即可
        prefix: ${spring.application.name} # 缺省即可

  #分库分表配置 基于4.X文档
  shardingsphere:
    datasource:
      names: order1,order2  #定义2个数据源
      order1:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/order_db_1?useUnicode=true
        username: root
        password: root
      order2:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/order_db_2?useUnicode=true
        username: root
        password: root
    sharding:
      broadcast-tables: t_dict #指定公共表
      tables:
        t_order: #表t_order的分库分表策略 如何将一个逻辑表映射为多个实际表
          actual-data-nodes: order$->{1..2}.t_order_$->{1..3}
          key-generator: #指定t_order表的主键order_id生成策略为SNOWFLAKE雪花算法
            column: order_id
            type: SNOWFLAKE
          #分库的策略  以user_id为分片键，分片策略为user_id % 2+1 ，user_id为偶数操作order1数据源，否则操作order2
          database-strategy:
            inline:
              algorithm-expression: order$->{user_id % 2+1}
              sharding-column: user_id
           #分表的策略
          table-strategy:
            inline:
              algorithmExpression: t_order_$->{order_id % 3 + 1}
              sharding-column: order_id
    props:
      sql:
        show: true #打开sql输出日志
  main:
    allow-bean-definition-overriding: true