server:
  port: 7005


spring:
  application:
    name: mall_order
  cloud:
    nacos:
      discovery:
        server-addr: http://localhost:8848
      config:
        server-addr: http://localhost:8848
        file-extension: yaml  # 必须修改成yaml
        group: DEFAULT_GROUP  # 缺省即可
        prefix: ${spring.application.name} # 缺省即可

  #分库分表配置 基于4.X文档
  shardingsphere:
    datasource: #1.定义数据源-->1主2从
      names: master1order2021,master1order2022,slave1order2021,slave1order2022,slave2order2021,slave2order2022  #定义数据源
      master1order2021:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/order_db_1?useUnicode=true
        username: root
        password: root
      master1order2022:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/order_db_2?useUnicode=true
        username: root
        password: root
      slave1order2021:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3307/order_db_1?useUnicode=true
        username: root
        password: root
      slave1order2022:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3307/order_db_2?useUnicode=true
        username: root
        password: root
      slave2order2021:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3308/order_db_1?useUnicode=true
        username: root
        password: root
      slave2order2022:
        type: com.alibaba.druid.pool.DruidDataSource
        driverClassName: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3308/order_db_1?useUnicode=true
        username: root
        password: root

    sharding:
      broadcast-tables: t_dict #指定公共表
      master-slave-rules: #2.主库从库逻辑数据源定义
        ds1:
          master-data-source-name: master1order2021
          slave-data-source-names: slave1order2021,slave2order2021
        ds2:
          master-data-source-name: master1order2022
          slave-data-source-names: slave1order2022,slave2order2022

      tables:
        t_order: #3.表t_order的分库分表策略
          actual-data-nodes: ds$->{1..2}.t_order_u$->{1..2}_o$->{1..2}
          key-generator: #指定t_order表的主键order_id生成策略为SNOWFLAKE雪花算法
            column: order_id
            type: SNOWFLAKE
          #4.分库的策略 按create_time
          database-strategy:
            complex:
              algorithm-class-name: com.mall.cloud.sharding.CustomShardingDatabaseStrategy
              sharding-columns: create_time
           #5.分表的策略 按user_id order_id
          table-strategy:
            complex:
              algorithm-class-name: com.mall.cloud.sharding.CustomShardingTableStrategy
              sharding-columns: user_id,order_id
#              sharding-column: create_time,user_id,order_id
    props:
      sql:
        show: true #打开sql输出日志
  main:
    allow-bean-definition-overriding: true

